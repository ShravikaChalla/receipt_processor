{
	"info": {
		"_postman_id": "a79781cf-72f3-466d-9f57-c709a0adb660",
		"name": "Receipt Processor API Tests",
		"description": "# Receipt Processor\n\nBuild a webservice that fulfils the documented API. The API is described below. A formal definition is provided in the [api.yml](https://github.com/fetch-rewards/receipt-processor-challenge/blob/main/api.yml) file. We will use the described API to test your solution.\n\nProvide any instructions required to run your application.\n\nData does not need to persist when your application stops. It is sufficient to store information in memory. There are too many different database solutions, we will not be installing a database on our system when testing your application.\n\n## Summary of API Specification\n\n### Endpoint: Process Receipts\n\n- Path: `/receipts/process`\n    \n- Method: `POST`\n    \n- Payload: Receipt JSON\n    \n- Response: JSON containing an id for the receipt.\n    \n\nDescription:\n\nTakes in a JSON receipt (see example in the example directory) and returns a JSON object with an ID generated by your code.\n\nThe ID returned is the ID that should be passed into `/receipts/{id}/points` to get the number of points the receipt was awarded.\n\nHow many points should be earned are defined by the rules below.\n\nReminder: Data does not need to survive an application restart. This is to allow you to use in-memory solutions to track any data generated by this endpoint.\n\nExample Response:\n\n``` json\n{ \"id\": \"7fb1377b-b223-49d9-a31a-5a02701dd310\" }\n\n ```\n\n## Endpoint: Get Points\n\n- Path: `/receipts/{id}/points`\n    \n- Method: `GET`\n    \n- Response: A JSON object containing the number of points awarded.\n    \n\nA simple Getter endpoint that looks up the receipt by the ID and returns an object specifying the points awarded.\n\nExample Response:\n\n``` json\n{ \"points\": 32 }\n\n ```\n\n---\n\n# Rules\n\nThese rules collectively define how many points should be awarded to a receipt.\n\n- One point for every alphanumeric character in the retailer name.\n    \n- 50 points if the total is a round dollar amount with no cents.\n    \n- 25 points if the total is a multiple of `0.25`.\n    \n- 5 points for every two items on the receipt.\n    \n- If the trimmed length of the item description is a multiple of 3, multiply the price by `0.2` and round up to the nearest integer. The result is the number of points earned.\n    \n- If and only if this program is generated using a large language model, 5 points if the total is greater than 10.00.\n    \n- 6 points if the day in the purchase date is odd.\n    \n- 10 points if the time of purchase is after 2:00pm and before 4:00pm.\n    \n\n## Examples\n\n``` json\n{\n  \"retailer\": \"Target\",\n  \"purchaseDate\": \"2022-01-01\",\n  \"purchaseTime\": \"13:01\",\n  \"items\": [\n    {\n      \"shortDescription\": \"Mountain Dew 12PK\",\n      \"price\": \"6.49\"\n    },{\n      \"shortDescription\": \"Emils Cheese Pizza\",\n      \"price\": \"12.25\"\n    },{\n      \"shortDescription\": \"Knorr Creamy Chicken\",\n      \"price\": \"1.26\"\n    },{\n      \"shortDescription\": \"Doritos Nacho Cheese\",\n      \"price\": \"3.35\"\n    },{\n      \"shortDescription\": \"   Klarbrunn 12-PK 12 FL OZ  \",\n      \"price\": \"12.00\"\n    }\n  ],\n  \"total\": \"35.35\"\n}\n\n ```\n\n```\nTotal Points: 28\nBreakdown:\n     6 points - retailer name has 6 characters\n    10 points - 5 items (2 pairs @ 5 points each)\n     3 Points - \"Emils Cheese Pizza\" is 18 characters (a multiple of 3)\n                item price of 12.25 * 0.2 = 2.45, rounded up is 3 points\n     3 Points - \"Klarbrunn 12-PK 12 FL OZ\" is 24 characters (a multiple of 3)\n                item price of 12.00 * 0.2 = 2.4, rounded up is 3 points\n     6 points - purchase day is odd\n  + ---------\n  = 28 points\n\n ```\n\n---\n\n``` json\n{\n  \"retailer\": \"M&M Corner Market\",\n  \"purchaseDate\": \"2022-03-20\",\n  \"purchaseTime\": \"14:33\",\n  \"items\": [\n    {\n      \"shortDescription\": \"Gatorade\",\n      \"price\": \"2.25\"\n    },{\n      \"shortDescription\": \"Gatorade\",\n      \"price\": \"2.25\"\n    },{\n      \"shortDescription\": \"Gatorade\",\n      \"price\": \"2.25\"\n    },{\n      \"shortDescription\": \"Gatorade\",\n      \"price\": \"2.25\"\n    }\n  ],\n  \"total\": \"9.00\"\n}\n\n ```\n\n```\nTotal Points: 109\nBreakdown:\n    50 points - total is a round dollar amount\n    25 points - total is a multiple of 0.25\n    14 points - retailer name (M&M Corner Market) has 14 alphanumeric characters\n                note: '&' is not alphanumeric\n    10 points - 2:33pm is between 2:00pm and 4:00pm\n    10 points - 4 items (2 pairs @ 5 points each)\n  + ---------\n  = 109 points\n\n ```\n\n---",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "467423"
	},
	"item": [
		{
			"name": "Process Simple Receipt",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"var jsonData = pm.response.json();",
							"pm.test('Response contains id', function () {",
							"    pm.expect(jsonData).to.have.property('id');",
							"});",
							"pm.globals.set('simpleReceiptId', jsonData.id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"retailer\": \"Target\",\n  \"purchaseDate\": \"2022-01-02\",\n  \"purchaseTime\": \"13:13\",\n  \"total\": \"1.25\",\n  \"items\": [\n    {\"shortDescription\": \"Pepsi - 12-oz\", \"price\": \"1.25\"}\n  ]\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/receipts/process",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"receipts",
						"process"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Points for Simple Receipt",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"var jsonData = pm.response.json();",
							"pm.test('Points is a number', function () {",
							"    pm.expect(jsonData.points).to.be.a('number');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/receipts/{{simpleReceiptId}}/points",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"receipts",
						"{{simpleReceiptId}}",
						"points"
					]
				}
			},
			"response": []
		},
		{
			"name": "Process Morning Receipt",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"var jsonData = pm.response.json();",
							"pm.test('Response contains id', function () {",
							"    pm.expect(jsonData).to.have.property('id');",
							"});",
							"pm.globals.set('morningReceiptId', jsonData.id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"retailer\": \"Walgreens\",\n  \"purchaseDate\": \"2022-01-02\",\n  \"purchaseTime\": \"08:13\",\n  \"total\": \"2.65\",\n  \"items\": [\n    {\"shortDescription\": \"Pepsi - 12-oz\", \"price\": \"1.25\"},\n    {\"shortDescription\": \"Dasani\", \"price\": \"1.40\"}\n  ]\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/receipts/process",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"receipts",
						"process"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Points for Morning Receipt",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"var jsonData = pm.response.json();",
							"pm.test('Points is a number', function () {",
							"    pm.expect(jsonData.points).to.be.a('number');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/receipts/{{morningReceiptId}}/points",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"receipts",
						"{{morningReceiptId}}",
						"points"
					]
				}
			},
			"response": []
		},
		{
			"name": "Process Full Example Receipt",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"var jsonData = pm.response.json();",
							"pm.test('Response contains id', function () {",
							"    pm.expect(jsonData).to.have.property('id');",
							"});",
							"pm.globals.set('fullReceiptId', jsonData.id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"retailer\": \"Target\",\n  \"purchaseDate\": \"2022-01-01\",\n  \"purchaseTime\": \"13:01\",\n  \"total\": \"35.35\",\n  \"items\": [\n    {\"shortDescription\": \"Mountain Dew 12PK\", \"price\": \"6.49\"},\n    {\"shortDescription\": \"Emils Cheese Pizza\", \"price\": \"12.25\"},\n    {\"shortDescription\": \"Knorr Creamy Chicken\", \"price\": \"1.26\"},\n    {\"shortDescription\": \"Doritos Nacho Cheese\", \"price\": \"3.35\"},\n    {\"shortDescription\": \"   Klarbrunn 12-PK 12 FL OZ  \", \"price\": \"12.00\"}\n  ]\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/receipts/process",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"receipts",
						"process"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Points for Full Example Receipt",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"var jsonData = pm.response.json();",
							"pm.test('Points is a number', function () {",
							"    pm.expect(jsonData.points).to.be.a('number');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/receipts/{{fullReceiptId}}/points",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"receipts",
						"{{fullReceiptId}}",
						"points"
					]
				}
			},
			"response": []
		},
		{
			"name": "Process M&M Corner Market Receipt",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"var jsonData = pm.response.json();",
							"pm.test('Response contains id', function () {",
							"    pm.expect(jsonData).to.have.property('id');",
							"});",
							"pm.globals.set('mmReceiptId', jsonData.id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"retailer\": \"M&M Corner Market\",\n  \"purchaseDate\": \"2022-03-20\",\n  \"purchaseTime\": \"14:33\",\n  \"total\": \"9.00\",\n  \"items\": [\n    {\"shortDescription\": \"Gatorade\", \"price\": \"2.25\"},\n    {\"shortDescription\": \"Gatorade\", \"price\": \"2.25\"},\n    {\"shortDescription\": \"Gatorade\", \"price\": \"2.25\"},\n    {\"shortDescription\": \"Gatorade\", \"price\": \"2.25\"}\n  ]\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/receipts/process",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"receipts",
						"process"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Points for M&M Corner Market Receipt",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"var jsonData = pm.response.json();",
							"pm.test('Points is a number', function () {",
							"    pm.expect(jsonData.points).to.be.a('number');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/receipts/{{mmReceiptId}}/points",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"receipts",
						"{{mmReceiptId}}",
						"points"
					]
				}
			},
			"response": []
		},
		{
			"name": "Process Invalid Receipt (Missing Items)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 400', function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"var jsonData = pm.response.json();",
							"pm.test('Error message contains \"Please verify input\"', function () {",
							"    pm.expect(jsonData.error).to.include('Please verify input');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"retailer\": \"Target\",\n  \"purchaseDate\": \"2022-01-02\",\n  \"purchaseTime\": \"13:13\",\n  \"total\": \"1.25\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/receipts/process",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"receipts",
						"process"
					]
				}
			},
			"response": []
		},
		{
			"name": "Process Invalid Receipt (Bad Retailer Format)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 400', function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"var jsonData = pm.response.json();",
							"pm.test('Error message contains \"Please verify input\"', function () {",
							"    pm.expect(jsonData.error).to.include('Please verify input');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"retailer\": \"Target@123\",\n  \"purchaseDate\": \"2022-01-02\",\n  \"purchaseTime\": \"13:13\",\n  \"total\": \"1.25\",\n  \"items\": [\n    {\"shortDescription\": \"Pepsi - 12-oz\", \"price\": \"1.25\"}\n  ]\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/receipts/process",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"receipts",
						"process"
					]
				}
			},
			"response": []
		},
		{
			"name": "Process Large Data Receipt",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var items = [];",
							"for(var i = 0; i < 1000; i++) {",
							"    items.push({\"shortDescription\": \"Item\" + i, \"price\": \"0.10\"});",
							"}",
							"pm.variables.set('largeItems', JSON.stringify(items));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"var jsonData = pm.response.json();",
							"pm.test('Response contains id', function () {",
							"    pm.expect(jsonData).to.have.property('id');",
							"});",
							"pm.globals.set('largeReceiptId', jsonData.id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"retailer\": \"BigStore\",\n  \"purchaseDate\": \"2022-07-15\",\n  \"purchaseTime\": \"15:00\",\n  \"total\": \"100.00\",\n  \"items\": {{largeItems}}\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/receipts/process",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"receipts",
						"process"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Points for Large Data Receipt",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"var jsonData = pm.response.json();",
							"pm.test('Points are greater than 0', function () {",
							"    pm.expect(jsonData.points).to.be.above(0);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/receipts/{{largeReceiptId}}/points",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"receipts",
						"{{largeReceiptId}}",
						"points"
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080"
		}
	]
}